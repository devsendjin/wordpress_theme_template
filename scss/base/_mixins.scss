%bd {
	border: 1px solid #000000;
}

%visually-hidden {
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	overflow: hidden;
	position: absolute;
	white-space: nowrap;
	height: 1px;
	width: 1px;
}

%unselectable {
	-webkit-touch-callout: none; /* iOS Safari */
	-webkit-user-select: none;   /* Chrome/Safari/Opera */
	-khtml-user-select: none;    /* Konqueror */
	-moz-user-select: none;      /* Firefox */
	-ms-user-select: none;       /* Internet Explorer/Edge */
	user-select: none;           /* Non-prefixed version, currently
                                  not supported by any browser */
}

%lazyload {
	opacity: 0;
	&.lazyloading {
		opacity: 0;
	}
	&.lazyloaded {
		opacity: 1;
	}
}

/*
@include placeholder{
    color: #000000;
};
*/
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content
	}
	&:-moz-placeholder {
		@content
	}
	&::-moz-placeholder {
		@content
	}
	&:-ms-input-placeholder {
		@content
	}
	&::placeholder {
		@content
	}
}

// svg background
@mixin svgbg($width: 0, $height: 0, $url: '') {
  content: '';
  display: block;
  position: absolute;
  width: $width;
  height: $height;
  background-image: url($url);
  background-size: 100%;
  background-repeat: no-repeat;
  background-position: center;
}

//background-image
@mixin bgi($color: #000000, $height: 1px, $bottom: 0) {
	background-image: linear-gradient(to top, transparent $bottom, $color $bottom, $color $height+$bottom, transparent $height+$bottom);
}

@mixin underline-end-state($bgSizeX: 100%, $bgSizeY: 100%, $bgPos: left, $behavior: null, $trsProps: null, $trsDuration: null) {
	background-position: $bgPos;
	@if ($behavior == null) {
		background-size: $bgSizeX $bgSizeY;
	}
	@if ($behavior == show-on-hover) {
		background-size: 100% $bgSizeY;
	}
	@if ($behavior == remove-on-hover) {
		background-size: 0 $bgSizeY;
	}
	@if ($trsProps != null) {
		transition-property: unquote($trsProps);
	}
	@if ($trsDuration != null) {
		transition-duration: $trsDuration;
	}
}

@mixin underline-start-state($color: #000000, $bgSizeX: 0, $bgSizeY: 100%, $bgPos: left, $trsProps: background-size, $trsDuration: .3s, $behavior: null, $height: 1px, $bottom: 0) {
	@include bgi($color, $height, $bottom);
	background-repeat: no-repeat;
	background-position: $bgPos;
	transition-property: unquote($trsProps);
	transition-duration: $trsDuration;

	@if ($behavior == null) {
		background-size: $bgSizeX $bgSizeY;
	}
	@if ($behavior == show-on-hover) {
		background-size: 0 $bgSizeY;
	}

	@if ($behavior == remove-on-hover) {
		background-size: 100% $bgSizeY;
	}
}

@mixin underline($color: #000000, $bgSizeX: 0, $bgSizeY: 100%, $bgPos: left, $trsProps: background-size, $trsDuration: .3s, $behavior: show-on-hover, $height: 1px, $bottom: 0) {
	@include underline-start-state($color, $bgSizeX, $bgSizeY, $bgPos, $trsProps, $trsDuration, $behavior, $height, $bottom);
	&.hover, &:hover {
		@include underline-end-state($bgSizeX, $bgSizeY, $bgPos, $behavior);
	}
}

// =============================================================================
// make scroll bar invisible, but still working
// =============================================================================

@mixin invisibleScrollbar {
	-ms-overflow-style: none; /* Internet Explorer 10+ */
	scrollbar-width: none; /* Firefox */
	&::-webkit-scrollbar {
		display: none; /* Safari and Chrome */
		width: 0;
		height: 0;
	}
	-ms-overflow-style: none; // EDGE
}

// =============================================================================
// reset button styles
// =============================================================================

@mixin btnReset($bgc: transparent) {
	border: none;
	outline: none;
	background-color: $bgc;
	appearance: none;
	cursor: pointer;
	&::-moz-focus-inner {
		border: 0;
	}
}

//Принцип работы сетки: (описание функции calcWidth)
//везде отнимаем "-1" т.к. после последней колонки нет отступа
//100% - (#{$gutter} * (#{$cols} - 1))  -  вычисляем сумму ширин всех колонок текущего контейнера без отступо между колонками
//100% - (<отступ между колонками> * <общее кол-во колонок> - <1 колонка>))
//
//((100% - (#{$gutter} * (#{$cols} - 1))) / #{$cols})  -  вычисляем ширину 1-й колонки без отступов между колонками
//100% - (<отступ между колонками> * (<общее кол-во колонок> - <1 колонка>)) / <общее кол-во колонок>
//
//calc(((100% - (#{$gutter} * (#{$cols} - 1))) / #{$cols}) * #{$num} + #{$gutter} * (#{$num} - 1) + #{$gutterShift})  -  считаем ширину колонок блока + отступы между
// колонками + добавляем отступы между колоками, если нужно сдвинуть блок
// (100% - (<отступ между колонками> * <общее кол-во колонок> - <1 колонка>)) / <общее кол-во колонок> * <требуемое кол-во колонок> + <отступ> * (<требуемое кол-во колонок> - <1 колонка> + <отступ между колонками(может быть отрицательный)>)

/**
 * Как использовать:
 * $gutter - опциональный параметр
 *
 * @include width(7, $gutter);
 * @include pullRight(1);
 * margin-right: $gutter;   or   margin-left: $gutter;
 */

@function calcWidth($num, $gutterShift: 0px, $cols: $cols, $gutter: $gutter) {
	@return calc(((100% - (#{$gutter} * (#{$cols} - 1))) / #{$cols}) * #{$num} + #{$gutter} * (#{$num} - 1) + #{$gutterShift});
}

// ширина колонки
@mixin width($num, $gutterShift: 0px, $cols: $cols, $gutter: $gutter) {
	width: calcWidth($num, $gutterShift, $cols, $gutter);
}

//$property - задаём или margin или padding, по умолчанию margin
// добавляем отступ слева
@mixin pullLeft($num, $gutterShift: 0px, $property: margin, $cols: $cols, $gutter: $gutter) {
	#{$property}-left: calcWidth($num, $gutterShift, $cols, $gutter);
}

//$property - задаём или margin или padding, по умолчанию margin
// добавляем отступ справа
@mixin pullRight($num, $gutterShift: 0px, $property: margin, $cols: $cols, $gutter: $gutter) {
	#{$property}-right: calcWidth($num, $gutterShift, $cols, $gutter);
}

//нужно для fancybox
@function max($numbers...) {
	@return m#{a}x(#{$numbers});
}

@function min($numbers...) {
	@return m#{i}n(#{$numbers});
}
